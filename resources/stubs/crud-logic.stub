<?php

declare(strict_types=1);

namespace {{ namespace }};

use {{ modelNamespace }};
use AshiqueAr\LaravelCrudGenerator\Services\Crud\BaseCrudLogic;

/**
 * Custom CRUD logic for {{ modelClass }} model.
 *
 * This class extends the base CRUD logic to provide custom behavior
 * for {{ modelClass }} operations. You can override any of the base
 * methods to implement specific business logic.
 */
class {{ class }} extends BaseCrudLogic
{
    /**
     * Get the model class this logic handles.
     *
     * @return string
     */
    public function getModelClass(): string
    {
        return {{ modelClass }}::class;
    }

    /**
     * Apply custom query modifications before listing resources.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function beforeIndex(\Illuminate\Database\Eloquent\Builder $query, \Illuminate\Http\Request $request): \Illuminate\Database\Eloquent\Builder
    {
        // Add custom query modifications here
        // Example: $query->with(['relation'])->where('status', 'active');
        
        return parent::beforeIndex($query, $request);
    }

    /**
     * Customize data before creating a new record.
     *
     * @param array $data
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function beforeCreate(array $data, \Illuminate\Http\Request $request): array
    {
        // Add custom logic before creating
        // Example: $data['created_by'] = auth()->id();
        
        return parent::beforeCreate($data, $request);
    }

    /**
     * Customize the model after creation.
     *
     * @param {{ modelClass }} ${{ modelVariable }}
     * @param \Illuminate\Http\Request $request
     * @return void
     */
    public function afterCreate(${{ modelVariable }}, \Illuminate\Http\Request $request): void
    {
        // Add custom logic after creating
        // Example: $this->sendNotification(${{ modelVariable }});
        
        parent::afterCreate(${{ modelVariable }}, $request);
    }

    /**
     * Customize data before updating a record.
     *
     * @param array $data
     * @param {{ modelClass }} ${{ modelVariable }}
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function beforeUpdate(array $data, ${{ modelVariable }}, \Illuminate\Http\Request $request): array
    {
        // Add custom logic before updating
        // Example: $data['updated_by'] = auth()->id();
        
        return parent::beforeUpdate($data, ${{ modelVariable }}, $request);
    }

    /**
     * Customize the model after update.
     *
     * @param {{ modelClass }} ${{ modelVariable }}
     * @param \Illuminate\Http\Request $request
     * @return void
     */
    public function afterUpdate(${{ modelVariable }}, \Illuminate\Http\Request $request): void
    {
        // Add custom logic after updating
        // Example: $this->clearCache(${{ modelVariable }});
        
        parent::afterUpdate(${{ modelVariable }}, $request);
    }

    /**
     * Customize logic before deleting a record.
     *
     * @param {{ modelClass }} ${{ modelVariable }}
     * @param \Illuminate\Http\Request $request
     * @return bool
     */
    public function beforeDelete(${{ modelVariable }}, \Illuminate\Http\Request $request): bool
    {
        // Add custom logic before deleting
        // Example: if (${{ modelVariable }}->hasRelatedRecords()) return false;
        
        return parent::beforeDelete(${{ modelVariable }}, $request);
    }

    /**
     * Customize logic after deleting a record.
     *
     * @param {{ modelClass }} ${{ modelVariable }}
     * @param \Illuminate\Http\Request $request
     * @return void
     */
    public function afterDelete(${{ modelVariable }}, \Illuminate\Http\Request $request): void
    {
        // Add custom logic after deleting
        // Example: $this->cleanupFiles(${{ modelVariable }});
        
        parent::afterDelete(${{ modelVariable }}, $request);
    }

    /**
     * Get additional validation rules for this resource.
     *
     * @param \Illuminate\Http\Request $request
     * @param {{ modelClass }}|null ${{ modelVariable }}
     * @return array
     */
    public function getValidationRules(\Illuminate\Http\Request $request, ${{ modelVariable }} = null): array
    {
        return [
            // Add your validation rules here
            // Example: 'name' => 'required|string|max:255',
        ];
    }

    /**
     * Apply custom authorization logic beyond permissions.
     *
     * @param string $action The action being performed (view, create, edit, delete)
     * @param {{ modelClass }}|null ${{ modelVariable }} The model being accessed (null for index/create)
     * @param \Illuminate\Http\Request $request
     * @return bool
     */
    public function authorize(string $action, ${{ modelVariable }} = null, \Illuminate\Http\Request $request): bool
    {
        // Add custom authorization logic here
        // Example: return auth()->user()->can($action . '-{{ modelVariable }}s', ${{ modelVariable }});
        
        return parent::authorize($action, ${{ modelVariable }}, $request);
    }
}


